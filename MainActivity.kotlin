import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.text.input.TextFieldValue
import kotlin.random.Random

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MathGameApp()
        }
    }
}

@Composable
fun MathGameApp() {
    var score by remember { mutableStateOf(0) }
    var turn by remember { mutableStateOf(3) }
    var currentProblem by remember { mutableStateOf(generateProblem()) }
    var userAnswer by remember { mutableStateOf(TextFieldValue("")) }
    var gameOver by remember { mutableStateOf(false) }
    var message by remember { mutableStateOf("") }

    fun checkAnswer() {
        if (userAnswer.text.toIntOrNull() == currentProblem.second) {
            score++
            message = "Correct!"
        } else {
            message = "Incorrect!"
        }

        turn--
        if (turn <= 0) {
            gameOver = true
            message = "Game Over! Final Score: $score"
        } else {
            currentProblem = generateProblem()
            userAnswer = TextFieldValue("")
        }
    }

    fun restartGame() {
        score = 0
        turn = 3
        gameOver = false
        message = ""
        currentProblem = generateProblem()
        userAnswer = TextFieldValue("")
    }

    Surface(modifier = Modifier.fillMaxSize(), color = MaterialTheme.colorScheme.background) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center,
            modifier = Modifier.fillMaxSize().padding(16.dp)
        ) {
            if (!gameOver) {
                Text(text = "Solve: ${currentProblem.first}", style = MaterialTheme.typography.h5)

                Spacer(modifier = Modifier.height(16.dp))

                BasicTextField(
                    value = userAnswer,
                    onValueChange = { userAnswer = it },
                    singleLine = true,
                    modifier = Modifier
                        .padding(16.dp)
                        .fillMaxWidth()
                        .height(56.dp)
                        .border(1.dp, Color.Black)
                        .padding(16.dp)
                )

                Spacer(modifier = Modifier.height(16.dp))

                Button(onClick = { checkAnswer() }) {
                    Text(text = "Submit Answer")
                }

                Spacer(modifier = Modifier.height(16.dp))

                Text(text = "Turns Left: $turn", style = MaterialTheme.typography.body1)

                Spacer(modifier = Modifier.height(16.dp))

                Text(text = message, style = MaterialTheme.typography.body2)
            } else {
                Text(text = message, style = MaterialTheme.typography.h5)

                Spacer(modifier = Modifier.height(16.dp))

                Button(onClick = { restartGame() }) {
                    Text(text = "Restart Game")
                }
            }
        }
    }
}

fun generateProblem(): Pair<String, Int> {
    val num1 = Random.nextInt(1, 11)
    val num2 = Random.nextInt(1, 11)
    val sum = num1 + num2
    return "$num1 + $num2" to sum
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    MathGameApp()
}
